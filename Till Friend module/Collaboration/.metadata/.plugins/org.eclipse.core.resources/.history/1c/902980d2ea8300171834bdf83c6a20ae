package com.niit.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.niit.dao.BlogPostDAO;
import com.niit.dao.UserDAO;
import com.niit.model.BlogPost;
import com.niit.model.User;
import com.niit.model.Error;
@Controller
public class BlogPostController {
	@Autowired
private BlogPostDAO blogPostDao;
	@Autowired
private UserDAO userDao;
	@RequestMapping(value="/saveblogpost",method=RequestMethod.POST)
	public ResponseEntity<?> saveBlogPost(@RequestBody BlogPost blogPost,HttpSession session){
		if(session.getAttribute("username")==null){
			Error error=new Error(5,"UnAuthorized User");
			return new ResponseEntity<Error>(error,HttpStatus.UNAUTHORIZED);//401 - 2nd call back func will be executed
		}
		String username=(String)session.getAttribute("username");
		
		User user=userDao.getUserByUsername(username);
		blogPost.setPostedOn(new Date());
		blogPost.setPostedBy(user);
		try{
		blogPostDao.saveBlogPost(blogPost);
		return new ResponseEntity<BlogPost>(blogPost,HttpStatus.OK);//200 - 1st call back function will be called
		}catch(Exception e){
			Error error=new Error(6,"Unable to insert blog post details " + e.getMessage());
			return new ResponseEntity<Error>(error,HttpStatus.INTERNAL_SERVER_ERROR);//500 - 2nd call back func will be executed
		}
	}
	@RequestMapping(value="/getblogposts/approved}")
	public ResponseEntity<?> getBlogPosts(@PathVariable int approved,HttpSession session){
		if(session.getAttribute("username")==null){
			Error error=new Error(5,"UnAuthorized User");
			return new ResponseEntity<Error>(error,HttpStatus.UNAUTHORIZED);//401 - 2nd call back func will be executed
		}
		List<BlogPost> blogPosts=blogPostDao.getBlogPosts(approved);
				return new ResponseEntity<List<BlogPost>>(blogPosts,HttpStatus.OK);
		}

@RequestMapping(value="/getblogpostbyid/{id}",method=RequestMethod.GET)
public ResponseEntity<?> getBlogPostsById(@PathVariable int id,HttpSession session){
	if(session.getAttribute("username")==null){
		Error error=new Error(5,"UnAuthorized User");
		return new ResponseEntity<Error>(error,HttpStatus.UNAUTHORIZED);
	}
	BlogPost blogPost=blogPostDao.getBlogPostById(id);
	return new ResponseEntity<BlogPost>(blogPost,HttpStatus.OK);
	}
}
		